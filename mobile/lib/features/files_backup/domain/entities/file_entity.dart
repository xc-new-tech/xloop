import 'package:equatable/equatable.dart';

/// Êñá‰ª∂ÂàÜÁ±ªÊûö‰∏æ
enum FileCategory {
  document('document', 'ÊñáÊ°£'),
  image('image', 'ÂõæÁâá'),
  audio('audio', 'Èü≥È¢ë'),
  video('video', 'ËßÜÈ¢ë'),
  other('other', 'ÂÖ∂‰ªñ');

  const FileCategory(this.value, this.label);
  
  final String value;
  final String label;

  static FileCategory fromString(String value) {
    return FileCategory.values.firstWhere(
      (category) => category.value == value,
      orElse: () => FileCategory.other,
    );
  }
}

/// Êñá‰ª∂Â§ÑÁêÜÁä∂ÊÄÅÊûö‰∏æ
enum FileStatus {
  uploading('uploading', '‰∏ä‰º†‰∏≠'),
  processing('processing', 'Â§ÑÁêÜ‰∏≠'),
  processed('processed', 'Â∑≤Â§ÑÁêÜ'),
  failed('failed', 'Â§ÑÁêÜÂ§±Ë¥•');

  const FileStatus(this.value, this.label);
  
  final String value;
  final String label;

  static FileStatus fromString(String value) {
    return FileStatus.values.firstWhere(
      (status) => status.value == value,
      orElse: () => FileStatus.failed,
    );
  }
}

/// ÊñáÊ°£ÂàáÁâá
class DocumentChunk extends Equatable {
  final int id;
  final String text;
  final int startPosition;
  final int endPosition;
  final int length;

  const DocumentChunk({
    required this.id,
    required this.text,
    required this.startPosition,
    required this.endPosition,
    required this.length,
  });

  @override
  List<Object?> get props => [id, text, startPosition, endPosition, length];
}

/// Êñá‰ª∂ÂÆû‰Ωì
class FileEntity extends Equatable {
  final String id;
  final String originalName;
  final String filename;
  final String mimetype;
  final int size;
  final String hash;
  final String path;
  final String userId;
  final String? knowledgeBaseId;
  final FileCategory category;
  final List<String> tags;
  final String? contentType;
  final String? extractedText;
  final Map<String, dynamic>? metadata;
  final List<DocumentChunk> chunks;
  final FileStatus status;
  final List<String> processingErrors;
  final int downloadCount;
  final DateTime? lastAccessedAt;
  final DateTime createdAt;
  final DateTime updatedAt;

  const FileEntity({
    required this.id,
    required this.originalName,
    required this.filename,
    required this.mimetype,
    required this.size,
    required this.hash,
    required this.path,
    required this.userId,
    this.knowledgeBaseId,
    required this.category,
    required this.tags,
    this.contentType,
    this.extractedText,
    this.metadata,
    required this.chunks,
    required this.status,
    required this.processingErrors,
    required this.downloadCount,
    this.lastAccessedAt,
    required this.createdAt,
    required this.updatedAt,
  });

  @override
  List<Object?> get props => [
        id,
        originalName,
        filename,
        mimetype,
        size,
        hash,
        path,
        userId,
        knowledgeBaseId,
        category,
        tags,
        contentType,
        extractedText,
        metadata,
        chunks,
        status,
        processingErrors,
        downloadCount,
        lastAccessedAt,
        createdAt,
        updatedAt,
      ];

  /// Ëé∑ÂèñÊñá‰ª∂Êâ©Â±ïÂêç
  String get fileExtension {
    final dotIndex = originalName.lastIndexOf('.');
    if (dotIndex == -1) return '';
    return originalName.substring(dotIndex + 1).toLowerCase();
  }

  /// Êñá‰ª∂Êâ©Â±ïÂêçÁöÑÂà´ÂêçÔºà‰∏∫‰∫ÜÂÖºÂÆπÔºâ
  String get extension => fileExtension;

  /// Êñá‰ª∂ÂêçÁöÑÂà´ÂêçÔºà‰∏∫‰∫ÜÂÖºÂÆπÔºâ
  String get name => originalName;

  /// Ëé∑ÂèñÊ†ºÂºèÂåñÁöÑÊñá‰ª∂Â§ßÂ∞è
  String get formattedSize {
    if (size < 1024) {
      return '${size}B';
    } else if (size < 1024 * 1024) {
      return '${(size / 1024).toStringAsFixed(1)}KB';
    } else if (size < 1024 * 1024 * 1024) {
      return '${(size / (1024 * 1024)).toStringAsFixed(1)}MB';
    } else {
      return '${(size / (1024 * 1024 * 1024)).toStringAsFixed(1)}GB';
    }
  }

  /// ÊòØÂê¶‰∏∫ÂõæÁâáÊñá‰ª∂
  bool get isImage => category == FileCategory.image;

  /// ÊòØÂê¶‰∏∫Èü≥È¢ëÊñá‰ª∂
  bool get isAudio => category == FileCategory.audio;

  /// ÊòØÂê¶‰∏∫ËßÜÈ¢ëÊñá‰ª∂
  bool get isVideo => category == FileCategory.video;

  /// ÊòØÂê¶‰∏∫ÊñáÊ°£Êñá‰ª∂
  bool get isDocument => category == FileCategory.document;

  /// ÊòØÂê¶Â§ÑÁêÜÂÆåÊàê
  bool get isProcessed => status == FileStatus.processed;

  /// ÊòØÂê¶Â§ÑÁêÜÂ§±Ë¥•
  bool get isFailed => status == FileStatus.failed;

  /// ÊòØÂê¶Ê≠£Âú®Â§ÑÁêÜ
  bool get isProcessing => 
      status == FileStatus.uploading || status == FileStatus.processing;

  /// Ëé∑ÂèñÊñá‰ª∂Á±ªÂûãÂõæÊ†á
  String get typeIcon {
    switch (category) {
      case FileCategory.document:
        switch (fileExtension) {
          case 'pdf':
            return 'üìÑ';
          case 'doc':
          case 'docx':
            return 'üìù';
          case 'xls':
          case 'xlsx':
            return 'üìä';
          case 'ppt':
          case 'pptx':
            return 'üìé';
          case 'txt':
            return 'üìã';
          default:
            return 'üìÑ';
        }
      case FileCategory.image:
        return 'üñºÔ∏è';
      case FileCategory.audio:
        return 'üéµ';
      case FileCategory.video:
        return 'üé¨';
      case FileCategory.other:
        return 'üìé';
    }
  }

  /// Ëé∑ÂèñÁä∂ÊÄÅÈ¢úËâ≤ÔºàMaterialÈ¢úËâ≤ÂêçÁß∞Ôºâ
  String get statusColor {
    switch (status) {
      case FileStatus.uploading:
        return 'blue';
      case FileStatus.processing:
        return 'orange';
      case FileStatus.processed:
        return 'green';
      case FileStatus.failed:
        return 'red';
    }
  }

  /// Ëé∑ÂèñÂ§ÑÁêÜËøõÂ∫¶ÊèèËø∞
  String get progressDescription {
    switch (status) {
      case FileStatus.uploading:
        return '‰∏ä‰º†‰∏≠...';
      case FileStatus.processing:
        return 'Ëß£Êûê‰∏≠...';
      case FileStatus.processed:
        return 'Â∑≤ÂÆåÊàê';
      case FileStatus.failed:
        return 'Â§ÑÁêÜÂ§±Ë¥•';
    }
  }

  /// ÊòØÂê¶ÊúâÈîôËØØ
  bool get hasErrors => processingErrors.isNotEmpty;

  /// Ëé∑ÂèñÈîôËØØ‰ø°ÊÅØÊëòË¶Å
  String get errorSummary {
    if (!hasErrors) return '';
    if (processingErrors.length == 1) {
      return processingErrors.first;
    }
    return '${processingErrors.first}Á≠â${processingErrors.length}‰∏™ÈîôËØØ';
  }

  /// ÊòØÂê¶ÊúâÊèêÂèñÁöÑÊñáÊú¨ÂÜÖÂÆπ
  bool get hasExtractedText => 
      extractedText != null && extractedText!.isNotEmpty;

  /// Ëé∑ÂèñÊñáÊú¨ÂÜÖÂÆπÊëòË¶Å
  String getTextSummary([int maxLength = 100]) {
    if (!hasExtractedText) return '';
    
    final text = extractedText!.trim();
    if (text.length <= maxLength) return text;
    
    return '${text.substring(0, maxLength)}...';
  }

  /// Ëé∑ÂèñÂÖÉÊï∞ÊçÆ‰ø°ÊÅØ
  String get metadataInfo {
    if (metadata == null || metadata!.isEmpty) return '';
    
    final info = <String>[];
    
    // Ê†πÊçÆÊñá‰ª∂Á±ªÂûãÊòæÁ§∫Áõ∏ÂÖ≥ÂÖÉÊï∞ÊçÆ
    switch (category) {
      case FileCategory.document:
        if (metadata!.containsKey('pages')) {
          info.add('${metadata!['pages']}È°µ');
        }
        if (metadata!.containsKey('words')) {
          info.add('${metadata!['words']}Â≠ó');
        }
        break;
      case FileCategory.image:
        if (metadata!.containsKey('width') && metadata!.containsKey('height')) {
          info.add('${metadata!['width']}√ó${metadata!['height']}');
        }
        break;
      case FileCategory.audio:
        if (metadata!.containsKey('duration')) {
          final duration = Duration(seconds: metadata!['duration']);
          info.add(_formatDuration(duration));
        }
        break;
      case FileCategory.video:
        if (metadata!.containsKey('duration')) {
          final duration = Duration(seconds: metadata!['duration']);
          info.add(_formatDuration(duration));
        }
        if (metadata!.containsKey('width') && metadata!.containsKey('height')) {
          info.add('${metadata!['width']}√ó${metadata!['height']}');
        }
        break;
      case FileCategory.other:
        break;
    }
    
    return info.join(' ‚Ä¢ ');
  }

  /// Ê†ºÂºèÂåñÊó∂Èïø
  String _formatDuration(Duration duration) {
    final hours = duration.inHours;
    final minutes = duration.inMinutes.remainder(60);
    final seconds = duration.inSeconds.remainder(60);
    
    if (hours > 0) {
      return '${hours}:${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}';
    } else {
      return '${minutes}:${seconds.toString().padLeft(2, '0')}';
    }
  }

  /// Â§çÂà∂Âπ∂Êõ¥Êñ∞Êñá‰ª∂ÂÆû‰Ωì
  FileEntity copyWith({
    String? id,
    String? originalName,
    String? filename,
    String? mimetype,
    int? size,
    String? hash,
    String? path,
    String? userId,
    String? knowledgeBaseId,
    FileCategory? category,
    List<String>? tags,
    String? contentType,
    String? extractedText,
    Map<String, dynamic>? metadata,
    List<DocumentChunk>? chunks,
    FileStatus? status,
    List<String>? processingErrors,
    int? downloadCount,
    DateTime? lastAccessedAt,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return FileEntity(
      id: id ?? this.id,
      originalName: originalName ?? this.originalName,
      filename: filename ?? this.filename,
      mimetype: mimetype ?? this.mimetype,
      size: size ?? this.size,
      hash: hash ?? this.hash,
      path: path ?? this.path,
      userId: userId ?? this.userId,
      knowledgeBaseId: knowledgeBaseId ?? this.knowledgeBaseId,
      category: category ?? this.category,
      tags: tags ?? this.tags,
      contentType: contentType ?? this.contentType,
      extractedText: extractedText ?? this.extractedText,
      metadata: metadata ?? this.metadata,
      chunks: chunks ?? this.chunks,
      status: status ?? this.status,
      processingErrors: processingErrors ?? this.processingErrors,
      downloadCount: downloadCount ?? this.downloadCount,
      lastAccessedAt: lastAccessedAt ?? this.lastAccessedAt,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }
} 